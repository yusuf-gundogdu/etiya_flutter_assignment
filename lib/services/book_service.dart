import 'package:grpc/grpc.dart';

import '../mockData/mock_book.dart';
import '../src/generated/book.pbgrpc.dart';
import 'get_it_setup.dart';

/// This class is the implementation of the BookServiceBase generated by the protoc compiler.
///
/// It is used to handle the incoming requests and send back the responses.
class BookService extends BookServiceBase {
  // This method is used to handle the incoming request for the FindBook method.
  Future<Book> getFindBook() async {
    setupGetIt();
    final channel = ClientChannel(
      'localhost',
      port: 50051,
      options: const ChannelOptions(credentials: ChannelCredentials.insecure()),
    );
    final bookClient = BookServiceClient(channel);
    final findBookRequest = FindBookRequest()..book = (Book()..title = '1984');
    final findBookResponse = await bookClient.findBook(findBookRequest);
    await channel.shutdown();
    return findBookResponse.book;
  }

  // This method is used to handle the incoming request for the FindBook method.
  @override
  Future<FindBookResponse> findBook(
      ServiceCall call, FindBookRequest request) async {
    final book =
        mockBooksData.firstWhere((book) => book.title == request.book.title);
    return FindBookResponse()..book = book;
  }

  // This method is used to handle the incoming request for the ListBooks method.
  Future<List<Book>> getListBooks() async {
    final channel = ClientChannel(
      'localhost',
      port: 50051,
      options: const ChannelOptions(credentials: ChannelCredentials.insecure()),
    );
    final bookClient = BookServiceClient(channel);
    final listBooksRequest = ListBooksRequest();
    final booksResponse = await bookClient.listBooks(listBooksRequest);
    await channel.shutdown();
    return booksResponse.books;
  }

  // This method is used to handle the incoming request for the ListBooks method.
  @override
  Future<ListBooksResponse> listBooks(
      ServiceCall call, ListBooksRequest request) async {
    return ListBooksResponse()..books.addAll(mockBooksData);
  }
}
